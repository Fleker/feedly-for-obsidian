import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

// --- START: Custom esbuild plugin for 'process/' import ---
const fixProcessImportPlugin = {
  name: 'fix-process-import', // A unique name for your plugin
  setup(build) {
    // This hook runs when esbuild tries to resolve a module path.
    // The filter /^process\/?$/ matches 'process' or 'process/'
    build.onResolve({ filter: /^(process|string_decoder)\/?$/ }, args => {
      // Check if it's an actual require or import statement
      if (args.kind === 'require-call' || args.kind === 'import-statement') {
        // If it is, tell esbuild to resolve it to the Node.js built-in 'process'
        // and mark it as external (meaning, don't bundle it, assume it's available globally)
        return { path: 'process', external: true };
      }
      return null; // Let other resolvers handle it if it doesn't match our criteria
    });
  },
};
// --- END: Custom esbuild plugin ---

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		'process',
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	platform: "node",
	plugins: [fixProcessImportPlugin]
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}